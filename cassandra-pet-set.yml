# Headless service to provide DNS lookup
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
    - port: 9042
  selector:
    app: cassandra-data
----
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra-lb
  name: cassandra-lb
spec:
  type: LoadBalancer
  ports:
    - port: 9042
  selector:
    app: cassandra-data
----
# new API name
apiVersion: "apps/v1alpha1"
kind: PetSet
metadata:
  name: cassandra
spec:
  serviceName: cassandra
  # replicas are the same as used by Replication Controllers
  # except pets are deployed in order 0, 1, 2, 3, etc
  replicas: 1
  template:
    metadata:
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
      labels:
        app: cassandra-data
    spec:
      # just as other component in Kubernetes one
      # or more containers are deployed
      imagePullSecrets:
        - name: moocheriokey
      containers:
      - name: cassandra
        image: registry.docker.moocher.io/moocherio/cassandra:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 9160
          name: thrift
        - containerPort: 9042
          name: cql
        - containerPort: 7199
          name: jmx
        env:
          - name: MAX_HEAP_SIZE
            value: 2048M
          - name: HEAP_NEWSIZE
            value: 200M
          - name: CASSANDRA_SEEDS
            value: "cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra"
          - name: PEER_DISCOVERY_SERVICE
            value: "cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra"
#          - name: CASSANDRA_ENDPOINT_SNITCH
#           value: GossipingPropertyFileSnitch
          - name: CASSANDRA_ENDPOINT_SNITCH
            value: GossipingPropertyFileSnitch
          - name: CASSANDRA_CLUSTER_NAME
            value: "Kong"
          - name: CASSANDRA_DC
            value: "MAD-DC1"
          - name: CASSANDRA_RACK
            value: "Kong-Rack1"
          - name: CASSANDRA_AUTO_BOOTSTRAP
            value: "false"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
#        readinessProbe:
#          exec:
#            command:
#            - /bin/bash
#            - -c
#            - /ready-probe.sh
#          initialDelaySeconds: 15
#          timeoutSeconds: 5
        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the pet volumes.
        volumeMounts:
        - name: data
          mountPath: /var/lib/cassandra/data
      volumes:
      - name: data
        hostPath:
          path: /cassandra_data
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.  Storage can be automatically
  # created for the Pets depending on the cloud environment.
#  volumeClaimTemplates:
#  - metadata:
#      name: cassandra-data
#      annotations:
#        volume.alpha.kubernetes.io/storage-class: anything
#    spec:
#      accessModes: [ "ReadWriteOnce" ]
#      resources:
#        requests:
#          storage: 40Gi
